

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "DataAccess\App.config"
//     Connection String Name: "OnlinePasalContext"
//     Connection String:      "data source=DESKTOP-UHHBQK9\SQLEXPRESS;initial catalog=MyCraig;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace NepFlex.DataAccess.Context
{
    using System.Linq;

    #region Unit of work

    public interface IOnlinePasalContext : System.IDisposable
    {
        System.Data.Entity.DbSet<ContactU> ContactUs { get; set; } // ContactUs
        System.Data.Entity.DbSet<CraigInquiry> CraigInquiries { get; set; } // Craig_Inquiry
        System.Data.Entity.DbSet<DbEncryptKey> DbEncryptKeys { get; set; } // DBEncryptKey
        System.Data.Entity.DbSet<ItemDescription> ItemDescriptions { get; set; } // Item_Description
        System.Data.Entity.DbSet<MasterCompany> MasterCompanies { get; set; } // Master_Company
        System.Data.Entity.DbSet<MasterSaltyPassword> MasterSaltyPasswords { get; set; } // Master_SaltyPassword
        System.Data.Entity.DbSet<MasterUser> MasterUsers { get; set; } // Master_Users
        System.Data.Entity.DbSet<MasterVerbiage> MasterVerbiages { get; set; } // Master_Verbiage
        System.Data.Entity.DbSet<PostMyData> PostMyDatas { get; set; } // PostMyData

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        System.Collections.Generic.List<ButtonSearchOnClickReturnModel> ButtonSearchOnClick(string text);
        System.Collections.Generic.List<ButtonSearchOnClickReturnModel> ButtonSearchOnClick(string text, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<ButtonSearchOnClickReturnModel>> ButtonSearchOnClickAsync(string text);

        System.Collections.Generic.List<GetDataReturnModel> GetData(long? id, string fromPage);
        System.Collections.Generic.List<GetDataReturnModel> GetData(long? id, string fromPage, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetDataReturnModel>> GetDataAsync(long? id, string fromPage);

        int SpCraigInquiry(string name, string email, string url, string detail, string username, string ui);
        // SpCraigInquiryAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        SpDbEncryptKeyReturnModel SpDbEncryptKey(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey);
        System.Threading.Tasks.Task<SpDbEncryptKeyReturnModel> SpDbEncryptKeyAsync(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey);

        System.Collections.Generic.List<SpRegisterUserReturnModel> SpRegisterUser(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui);
        System.Collections.Generic.List<SpRegisterUserReturnModel> SpRegisterUser(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpRegisterUserReturnModel>> SpRegisterUserAsync(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui);

        System.Collections.Generic.List<SpUpdateCompanyReturnModel> SpUpdateCompany(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber);
        System.Collections.Generic.List<SpUpdateCompanyReturnModel> SpUpdateCompany(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpUpdateCompanyReturnModel>> SpUpdateCompanyAsync(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber);

        int SpValidateUser(bool? validateUsingEmail, string username, string password, string dBeKey, string ui);
        // SpValidateUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class OnlinePasalContext : System.Data.Entity.DbContext, IOnlinePasalContext
    {
        public System.Data.Entity.DbSet<ContactU> ContactUs { get; set; } // ContactUs
        public System.Data.Entity.DbSet<CraigInquiry> CraigInquiries { get; set; } // Craig_Inquiry
        public System.Data.Entity.DbSet<DbEncryptKey> DbEncryptKeys { get; set; } // DBEncryptKey
        public System.Data.Entity.DbSet<ItemDescription> ItemDescriptions { get; set; } // Item_Description
        public System.Data.Entity.DbSet<MasterCompany> MasterCompanies { get; set; } // Master_Company
        public System.Data.Entity.DbSet<MasterSaltyPassword> MasterSaltyPasswords { get; set; } // Master_SaltyPassword
        public System.Data.Entity.DbSet<MasterUser> MasterUsers { get; set; } // Master_Users
        public System.Data.Entity.DbSet<MasterVerbiage> MasterVerbiages { get; set; } // Master_Verbiage
        public System.Data.Entity.DbSet<PostMyData> PostMyDatas { get; set; } // PostMyData

        static OnlinePasalContext()
        {
            System.Data.Entity.Database.SetInitializer<OnlinePasalContext>(null);
        }

        public OnlinePasalContext()
            : base("Name=OnlinePasalContext")
        {
        }

        public OnlinePasalContext(string connectionString)
            : base(connectionString)
        {
        }

        public OnlinePasalContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public OnlinePasalContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public OnlinePasalContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ContactUConfiguration());
            modelBuilder.Configurations.Add(new CraigInquiryConfiguration());
            modelBuilder.Configurations.Add(new DbEncryptKeyConfiguration());
            modelBuilder.Configurations.Add(new ItemDescriptionConfiguration());
            modelBuilder.Configurations.Add(new MasterCompanyConfiguration());
            modelBuilder.Configurations.Add(new MasterSaltyPasswordConfiguration());
            modelBuilder.Configurations.Add(new MasterUserConfiguration());
            modelBuilder.Configurations.Add(new MasterVerbiageConfiguration());
            modelBuilder.Configurations.Add(new PostMyDataConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ContactUConfiguration(schema));
            modelBuilder.Configurations.Add(new CraigInquiryConfiguration(schema));
            modelBuilder.Configurations.Add(new DbEncryptKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new ItemDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new MasterCompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new MasterSaltyPasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new MasterUserConfiguration(schema));
            modelBuilder.Configurations.Add(new MasterVerbiageConfiguration(schema));
            modelBuilder.Configurations.Add(new PostMyDataConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<ButtonSearchOnClickReturnModel> ButtonSearchOnClick(string text)
        {
            int procResult;
            return ButtonSearchOnClick(text, out procResult);
        }

        public System.Collections.Generic.List<ButtonSearchOnClickReturnModel> ButtonSearchOnClick(string text, out int procResult)
        {
            var textParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@text", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = text, Size = 20 };
            if (textParam.Value == null)
                textParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ButtonSearchOnClickReturnModel>("EXEC @procResult = [dbo].[button_SearchOnClick] @text", textParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ButtonSearchOnClickReturnModel>> ButtonSearchOnClickAsync(string text)
        {
            var textParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@text", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = text, Size = 20 };
            if (textParam.Value == null)
                textParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ButtonSearchOnClickReturnModel>("EXEC [dbo].[button_SearchOnClick] @text", textParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetDataReturnModel> GetData(long? id, string fromPage)
        {
            int procResult;
            return GetData(id, fromPage, out procResult);
        }

        public System.Collections.Generic.List<GetDataReturnModel> GetData(long? id, string fromPage, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ID", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var fromPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FromPage", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fromPage, Size = 20 };
            if (fromPageParam.Value == null)
                fromPageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDataReturnModel>("EXEC @procResult = [dbo].[GetData] @ID, @FromPage", idParam, fromPageParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetDataReturnModel>> GetDataAsync(long? id, string fromPage)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ID", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var fromPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FromPage", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fromPage, Size = 20 };
            if (fromPageParam.Value == null)
                fromPageParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetDataReturnModel>("EXEC [dbo].[GetData] @ID, @FromPage", idParam, fromPageParam).ToListAsync();

            return procResultData;
        }

        public int SpCraigInquiry(string name, string email, string url, string detail, string username, string ui)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 100 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var urlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@URL", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = url, Size = 400 };
            if (urlParam.Value == null)
                urlParam.Value = System.DBNull.Value;

            var detailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Detail", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = detail, Size = -1 };
            if (detailParam.Value == null)
                detailParam.Value = System.DBNull.Value;

            var usernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@username", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = username, Size = 50 };
            if (usernameParam.Value == null)
                usernameParam.Value = System.DBNull.Value;

            var uiParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UI", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ui, Size = 5 };
            if (uiParam.Value == null)
                uiParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_Craig_Inquiry] @Name, @Email, @URL, @Detail, @username, @UI", nameParam, emailParam, urlParam, detailParam, usernameParam, uiParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public SpDbEncryptKeyReturnModel SpDbEncryptKey(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey)
        {
            var dbEncryptKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DBEncryptKey", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dbEncryptKey, Size = -1 };
            if (dbEncryptKeyParam.Value == null)
                dbEncryptKeyParam.Value = System.DBNull.Value;

            var keyExpireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@KeyExpireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = keyExpireDate.GetValueOrDefault() };
            if (!keyExpireDate.HasValue)
                keyExpireDateParam.Value = System.DBNull.Value;

            var keyCreatedByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@keyCreatedBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = keyCreatedBy, Size = 50 };
            if (keyCreatedByParam.Value == null)
                keyCreatedByParam.Value = System.DBNull.Value;

            var remarksOnKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RemarksOnKey", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = remarksOnKey, Size = 50 };
            if (remarksOnKeyParam.Value == null)
                remarksOnKeyParam.Value = System.DBNull.Value;


            var procResultData = new SpDbEncryptKeyReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[Sp_DbEncryptKey]";
            cmd.Parameters.Add(dbEncryptKeyParam);
            cmd.Parameters.Add(keyExpireDateParam);
            cmd.Parameters.Add(keyCreatedByParam);
            cmd.Parameters.Add(remarksOnKeyParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SpDbEncryptKeyReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<SpDbEncryptKeyReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<SpDbEncryptKeyReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<SpDbEncryptKeyReturnModel> SpDbEncryptKeyAsync(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey)
        {
            var dbEncryptKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DBEncryptKey", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dbEncryptKey, Size = -1 };
            if (dbEncryptKeyParam.Value == null)
                dbEncryptKeyParam.Value = System.DBNull.Value;

            var keyExpireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@KeyExpireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = keyExpireDate.GetValueOrDefault() };
            if (!keyExpireDate.HasValue)
                keyExpireDateParam.Value = System.DBNull.Value;

            var keyCreatedByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@keyCreatedBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = keyCreatedBy, Size = 50 };
            if (keyCreatedByParam.Value == null)
                keyCreatedByParam.Value = System.DBNull.Value;

            var remarksOnKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RemarksOnKey", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = remarksOnKey, Size = 50 };
            if (remarksOnKeyParam.Value == null)
                remarksOnKeyParam.Value = System.DBNull.Value;


            var procResultData = new SpDbEncryptKeyReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[Sp_DbEncryptKey]";
            cmd.Parameters.Add(dbEncryptKeyParam);
            cmd.Parameters.Add(keyExpireDateParam);
            cmd.Parameters.Add(keyCreatedByParam);
            cmd.Parameters.Add(remarksOnKeyParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SpDbEncryptKeyReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<SpDbEncryptKeyReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<SpDbEncryptKeyReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public System.Collections.Generic.List<SpRegisterUserReturnModel> SpRegisterUser(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui)
        {
            int procResult;
            return SpRegisterUser(email, username, pswdHash, pswdSalt, pswdType, pswdUsedAlgorithm, dBeKey, ui, out procResult);
        }

        public System.Collections.Generic.List<SpRegisterUserReturnModel> SpRegisterUser(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui, out int procResult)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 150 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var usernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Username", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = username, Size = 50 };
            if (usernameParam.Value == null)
                usernameParam.Value = System.DBNull.Value;

            var pswdHashParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdHASH", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdHash, Size = -1 };
            if (pswdHashParam.Value == null)
                pswdHashParam.Value = System.DBNull.Value;

            var pswdSaltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdSALT", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdSalt, Size = -1 };
            if (pswdSaltParam.Value == null)
                pswdSaltParam.Value = System.DBNull.Value;

            var pswdTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdType, Size = 2 };
            if (pswdTypeParam.Value == null)
                pswdTypeParam.Value = System.DBNull.Value;

            var pswdUsedAlgorithmParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdUsedAlgorithm", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdUsedAlgorithm, Size = 10 };
            if (pswdUsedAlgorithmParam.Value == null)
                pswdUsedAlgorithmParam.Value = System.DBNull.Value;

            var dBeKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DBeKey", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dBeKey, Size = -1 };
            if (dBeKeyParam.Value == null)
                dBeKeyParam.Value = System.DBNull.Value;

            var uiParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UI", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ui, Size = 5 };
            if (uiParam.Value == null)
                uiParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpRegisterUserReturnModel>("EXEC @procResult = [dbo].[Sp_RegisterUser] @Email, @Username, @PswdHASH, @PswdSALT, @PswdType, @PswdUsedAlgorithm, @DBeKey, @UI", emailParam, usernameParam, pswdHashParam, pswdSaltParam, pswdTypeParam, pswdUsedAlgorithmParam, dBeKeyParam, uiParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpRegisterUserReturnModel>> SpRegisterUserAsync(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 150 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var usernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Username", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = username, Size = 50 };
            if (usernameParam.Value == null)
                usernameParam.Value = System.DBNull.Value;

            var pswdHashParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdHASH", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdHash, Size = -1 };
            if (pswdHashParam.Value == null)
                pswdHashParam.Value = System.DBNull.Value;

            var pswdSaltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdSALT", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdSalt, Size = -1 };
            if (pswdSaltParam.Value == null)
                pswdSaltParam.Value = System.DBNull.Value;

            var pswdTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdType, Size = 2 };
            if (pswdTypeParam.Value == null)
                pswdTypeParam.Value = System.DBNull.Value;

            var pswdUsedAlgorithmParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PswdUsedAlgorithm", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = pswdUsedAlgorithm, Size = 10 };
            if (pswdUsedAlgorithmParam.Value == null)
                pswdUsedAlgorithmParam.Value = System.DBNull.Value;

            var dBeKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DBeKey", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dBeKey, Size = -1 };
            if (dBeKeyParam.Value == null)
                dBeKeyParam.Value = System.DBNull.Value;

            var uiParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UI", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ui, Size = 5 };
            if (uiParam.Value == null)
                uiParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpRegisterUserReturnModel>("EXEC [dbo].[Sp_RegisterUser] @Email, @Username, @PswdHASH, @PswdSALT, @PswdType, @PswdUsedAlgorithm, @DBeKey, @UI", emailParam, usernameParam, pswdHashParam, pswdSaltParam, pswdTypeParam, pswdUsedAlgorithmParam, dBeKeyParam, uiParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpUpdateCompanyReturnModel> SpUpdateCompany(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber)
        {
            int procResult;
            return SpUpdateCompany(existingEmail, userId, isUserSeller, companyName, companyAddress, companyPhnCountryCode, companyPhoneNumber, isGovRegisteredCompany, isCompanyActive, companyNewEmailId, companyShowPhNumber, out procResult);
        }

        public System.Collections.Generic.List<SpUpdateCompanyReturnModel> SpUpdateCompany(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber, out int procResult)
        {
            var existingEmailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExistingEmail", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = existingEmail, Size = -1 };
            if (existingEmailParam.Value == null)
                existingEmailParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userId, Size = 150 };
            if (userIdParam.Value == null)
                userIdParam.Value = System.DBNull.Value;

            var isUserSellerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsUserSeller", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = isUserSeller, Size = 50 };
            if (isUserSellerParam.Value == null)
                isUserSellerParam.Value = System.DBNull.Value;

            var companyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyName, Size = 200 };
            if (companyNameParam.Value == null)
                companyNameParam.Value = System.DBNull.Value;

            var companyAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyAddress", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyAddress, Size = 200 };
            if (companyAddressParam.Value == null)
                companyAddressParam.Value = System.DBNull.Value;

            var companyPhnCountryCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyPHNCountryCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyPhnCountryCode, Size = 4 };
            if (companyPhnCountryCodeParam.Value == null)
                companyPhnCountryCodeParam.Value = System.DBNull.Value;

            var companyPhoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyPhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyPhoneNumber, Size = 14 };
            if (companyPhoneNumberParam.Value == null)
                companyPhoneNumberParam.Value = System.DBNull.Value;

            var isGovRegisteredCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGOVRegisteredCompany", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGovRegisteredCompany.GetValueOrDefault() };
            if (!isGovRegisteredCompany.HasValue)
                isGovRegisteredCompanyParam.Value = System.DBNull.Value;

            var isCompanyActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCompanyActive", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCompanyActive.GetValueOrDefault() };
            if (!isCompanyActive.HasValue)
                isCompanyActiveParam.Value = System.DBNull.Value;

            var companyNewEmailIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyNewEmailID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyNewEmailId, Size = 200 };
            if (companyNewEmailIdParam.Value == null)
                companyNewEmailIdParam.Value = System.DBNull.Value;

            var companyShowPhNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyShowPHNumber", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = companyShowPhNumber.GetValueOrDefault() };
            if (!companyShowPhNumber.HasValue)
                companyShowPhNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUpdateCompanyReturnModel>("EXEC @procResult = [dbo].[Sp_UpdateCompany] @ExistingEmail, @userId, @IsUserSeller, @CompanyName, @CompanyAddress, @CompanyPHNCountryCode, @CompanyPhoneNumber, @IsGOVRegisteredCompany, @IsCompanyActive, @CompanyNewEmailID, @CompanyShowPHNumber", existingEmailParam, userIdParam, isUserSellerParam, companyNameParam, companyAddressParam, companyPhnCountryCodeParam, companyPhoneNumberParam, isGovRegisteredCompanyParam, isCompanyActiveParam, companyNewEmailIdParam, companyShowPhNumberParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUpdateCompanyReturnModel>> SpUpdateCompanyAsync(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber)
        {
            var existingEmailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExistingEmail", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = existingEmail, Size = -1 };
            if (existingEmailParam.Value == null)
                existingEmailParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userId, Size = 150 };
            if (userIdParam.Value == null)
                userIdParam.Value = System.DBNull.Value;

            var isUserSellerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsUserSeller", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = isUserSeller, Size = 50 };
            if (isUserSellerParam.Value == null)
                isUserSellerParam.Value = System.DBNull.Value;

            var companyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyName, Size = 200 };
            if (companyNameParam.Value == null)
                companyNameParam.Value = System.DBNull.Value;

            var companyAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyAddress", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyAddress, Size = 200 };
            if (companyAddressParam.Value == null)
                companyAddressParam.Value = System.DBNull.Value;

            var companyPhnCountryCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyPHNCountryCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyPhnCountryCode, Size = 4 };
            if (companyPhnCountryCodeParam.Value == null)
                companyPhnCountryCodeParam.Value = System.DBNull.Value;

            var companyPhoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyPhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyPhoneNumber, Size = 14 };
            if (companyPhoneNumberParam.Value == null)
                companyPhoneNumberParam.Value = System.DBNull.Value;

            var isGovRegisteredCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsGOVRegisteredCompany", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isGovRegisteredCompany.GetValueOrDefault() };
            if (!isGovRegisteredCompany.HasValue)
                isGovRegisteredCompanyParam.Value = System.DBNull.Value;

            var isCompanyActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCompanyActive", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCompanyActive.GetValueOrDefault() };
            if (!isCompanyActive.HasValue)
                isCompanyActiveParam.Value = System.DBNull.Value;

            var companyNewEmailIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyNewEmailID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyNewEmailId, Size = 200 };
            if (companyNewEmailIdParam.Value == null)
                companyNewEmailIdParam.Value = System.DBNull.Value;

            var companyShowPhNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyShowPHNumber", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = companyShowPhNumber.GetValueOrDefault() };
            if (!companyShowPhNumber.HasValue)
                companyShowPhNumberParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpUpdateCompanyReturnModel>("EXEC [dbo].[Sp_UpdateCompany] @ExistingEmail, @userId, @IsUserSeller, @CompanyName, @CompanyAddress, @CompanyPHNCountryCode, @CompanyPhoneNumber, @IsGOVRegisteredCompany, @IsCompanyActive, @CompanyNewEmailID, @CompanyShowPHNumber", existingEmailParam, userIdParam, isUserSellerParam, companyNameParam, companyAddressParam, companyPhnCountryCodeParam, companyPhoneNumberParam, isGovRegisteredCompanyParam, isCompanyActiveParam, companyNewEmailIdParam, companyShowPhNumberParam).ToListAsync();

            return procResultData;
        }

        public int SpValidateUser(bool? validateUsingEmail, string username, string password, string dBeKey, string ui)
        {
            var validateUsingEmailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ValidateUsingEmail", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = validateUsingEmail.GetValueOrDefault() };
            if (!validateUsingEmail.HasValue)
                validateUsingEmailParam.Value = System.DBNull.Value;

            var usernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Username", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = username, Size = 40 };
            if (usernameParam.Value == null)
                usernameParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var dBeKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DBeKey", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dBeKey, Size = -1 };
            if (dBeKeyParam.Value == null)
                dBeKeyParam.Value = System.DBNull.Value;

            var uiParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UI", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ui, Size = 5 };
            if (uiParam.Value == null)
                uiParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[Sp_Validate_User] @ValidateUsingEmail, @Username, @Password, @DBeKey, @UI", validateUsingEmailParam, usernameParam, passwordParam, dBeKeyParam, uiParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeOnlinePasalContext : IOnlinePasalContext
    {
        public System.Data.Entity.DbSet<ContactU> ContactUs { get; set; }
        public System.Data.Entity.DbSet<CraigInquiry> CraigInquiries { get; set; }
        public System.Data.Entity.DbSet<DbEncryptKey> DbEncryptKeys { get; set; }
        public System.Data.Entity.DbSet<ItemDescription> ItemDescriptions { get; set; }
        public System.Data.Entity.DbSet<MasterCompany> MasterCompanies { get; set; }
        public System.Data.Entity.DbSet<MasterSaltyPassword> MasterSaltyPasswords { get; set; }
        public System.Data.Entity.DbSet<MasterUser> MasterUsers { get; set; }
        public System.Data.Entity.DbSet<MasterVerbiage> MasterVerbiages { get; set; }
        public System.Data.Entity.DbSet<PostMyData> PostMyDatas { get; set; }

        public FakeOnlinePasalContext()
        {
            ContactUs = new FakeDbSet<ContactU>("Id", "Username", "Email", "Comment", "Ui");
            CraigInquiries = new FakeDbSet<CraigInquiry>("Id", "Name", "Email", "Detail", "DateAdded");
            DbEncryptKeys = new FakeDbSet<DbEncryptKey>("KeyId");
            ItemDescriptions = new FakeDbSet<ItemDescription>("Id");
            MasterCompanies = new FakeDbSet<MasterCompany>("CompanyId", "UserId", "CompanyName", "Address", "PhnCountryCode", "PhNumber", "ShowPhNumber");
            MasterSaltyPasswords = new FakeDbSet<MasterSaltyPassword>("Pswdid");
            MasterUsers = new FakeDbSet<MasterUser>("UserId");
            MasterVerbiages = new FakeDbSet<MasterVerbiage>("VerId");
            PostMyDatas = new FakeDbSet<PostMyData>("PostId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<ButtonSearchOnClickReturnModel> ButtonSearchOnClick(string text)
        {
            int procResult;
            return ButtonSearchOnClick(text, out procResult);
        }

        public System.Collections.Generic.List<ButtonSearchOnClickReturnModel> ButtonSearchOnClick(string text, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ButtonSearchOnClickReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ButtonSearchOnClickReturnModel>> ButtonSearchOnClickAsync(string text)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ButtonSearchOnClick(text, out procResult));
        }

        public System.Collections.Generic.List<GetDataReturnModel> GetData(long? id, string fromPage)
        {
            int procResult;
            return GetData(id, fromPage, out procResult);
        }

        public System.Collections.Generic.List<GetDataReturnModel> GetData(long? id, string fromPage, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDataReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetDataReturnModel>> GetDataAsync(long? id, string fromPage)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetData(id, fromPage, out procResult));
        }

        public int SpCraigInquiry(string name, string email, string url, string detail, string username, string ui)
        {

            return 0;
        }

        public SpDbEncryptKeyReturnModel SpDbEncryptKey(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey)
        {
            int procResult;
            return SpDbEncryptKey(dbEncryptKey, keyExpireDate, keyCreatedBy, remarksOnKey, out procResult);
        }

        public SpDbEncryptKeyReturnModel SpDbEncryptKey(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey, out int procResult)
        {

            procResult = 0;
            return new SpDbEncryptKeyReturnModel();
        }

        public System.Threading.Tasks.Task<SpDbEncryptKeyReturnModel> SpDbEncryptKeyAsync(string dbEncryptKey, System.DateTime? keyExpireDate, string keyCreatedBy, string remarksOnKey)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpDbEncryptKey(dbEncryptKey, keyExpireDate, keyCreatedBy, remarksOnKey, out procResult));
        }

        public System.Collections.Generic.List<SpRegisterUserReturnModel> SpRegisterUser(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui)
        {
            int procResult;
            return SpRegisterUser(email, username, pswdHash, pswdSalt, pswdType, pswdUsedAlgorithm, dBeKey, ui, out procResult);
        }

        public System.Collections.Generic.List<SpRegisterUserReturnModel> SpRegisterUser(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpRegisterUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpRegisterUserReturnModel>> SpRegisterUserAsync(string email, string username, string pswdHash, string pswdSalt, string pswdType, string pswdUsedAlgorithm, string dBeKey, string ui)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpRegisterUser(email, username, pswdHash, pswdSalt, pswdType, pswdUsedAlgorithm, dBeKey, ui, out procResult));
        }

        public System.Collections.Generic.List<SpUpdateCompanyReturnModel> SpUpdateCompany(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber)
        {
            int procResult;
            return SpUpdateCompany(existingEmail, userId, isUserSeller, companyName, companyAddress, companyPhnCountryCode, companyPhoneNumber, isGovRegisteredCompany, isCompanyActive, companyNewEmailId, companyShowPhNumber, out procResult);
        }

        public System.Collections.Generic.List<SpUpdateCompanyReturnModel> SpUpdateCompany(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUpdateCompanyReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUpdateCompanyReturnModel>> SpUpdateCompanyAsync(string existingEmail, string userId, string isUserSeller, string companyName, string companyAddress, string companyPhnCountryCode, string companyPhoneNumber, bool? isGovRegisteredCompany, bool? isCompanyActive, string companyNewEmailId, bool? companyShowPhNumber)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUpdateCompany(existingEmail, userId, isUserSeller, companyName, companyAddress, companyPhnCountryCode, companyPhoneNumber, isGovRegisteredCompany, isCompanyActive, companyNewEmailId, companyShowPhNumber, out procResult));
        }

        public int SpValidateUser(bool? validateUsingEmail, string username, string password, string dBeKey, string ui)
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ContactUs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class ContactU
    {
        public long Id { get; set; } // ID (Primary key)
        public string Username { get; set; } // Username (Primary key) (length: 50)
        public string Email { get; set; } // Email (Primary key) (length: 100)
        public string Comment { get; set; } // Comment (Primary key) (length: 550)
        public string Website { get; set; } // website (length: 250)
        public System.DateTime? DateAdded { get; set; } // DateAdded
        public string Ui { get; set; } // UI (Primary key) (length: 5)
    }

    // Craig_Inquiry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class CraigInquiry
    {
        public long Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public string Email { get; set; } // Email (Primary key) (length: 100)
        public string Url { get; set; } // URL (length: 400)
        public string Detail { get; set; } // Detail (Primary key)
        public System.DateTime DateAdded { get; set; } // DateAdded (Primary key)
        public string UserName { get; set; } // UserName (length: 50)
        public string Ui { get; set; } // UI (length: 5)
    }

    // DBEncryptKey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class DbEncryptKey
    {
        public string KeyId { get; set; } // KeyId (Primary key) (length: 100)
        public string DbEncryptKey_ { get; set; } // DBEncryptKey
        public bool IsKeyActive { get; set; } // IsKeyActive
        public System.DateTime KeyCreateDate { get; set; } // KeyCreateDate
        public System.DateTime KeyExpireDate { get; set; } // KeyExpireDate
        public string RemarksOnKey { get; set; } // RemarksOnKey (length: 50)
        public string KeyCreatedBy { get; set; } // KeyCreatedBy (length: 25)
    }

    // Item_Description
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class ItemDescription
    {
        public long Id { get; set; } // ID (Primary key)
        public string Condition { get; set; } // Condition (length: 25)
        public string PhoneBrand { get; set; } // PhoneBrand (length: 20)
        public string AutosBrand { get; set; } // AutosBrand (length: 30)
        public string Modal { get; set; } // Modal (length: 50)
        public string MileKmph { get; set; } // Mile_KMPH (length: 25)
        public string Warranty { get; set; } // Warranty (length: 10)
        public string ExtraWarranty { get; set; } // extra_Warranty (length: 25)
    }

    // Master_Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterCompany
    {
        public long CompanyId { get; set; } // CompanyID (Primary key)
        public string UserId { get; set; } // UserID (Primary key) (length: 150)
        public string CompanyName { get; set; } // CompanyName (Primary key) (length: 200)
        public string Address { get; set; } // Address (Primary key) (length: 200)
        public string PhnCountryCode { get; set; } // PHNCountryCode (Primary key) (length: 10)
        public string PhNumber { get; set; } // PHNumber (Primary key) (length: 14)
        public string EmailId { get; set; } // EmailID (length: 200)
        public bool? IsGovRegistered { get; set; } // IsGOVRegistered
        public bool? IsActive { get; set; } // IsActive
        public bool? EmailVerified { get; set; } // EmailVerified
        public bool? PhoneVerified { get; set; } // PhoneVerified
        public bool ShowPhNumber { get; set; } // ShowPHNumber (Primary key)
        public System.DateTime? CreatedDate { get; set; } // Created Date
        public System.DateTime? UpdatedDate { get; set; } // Updated Date

        // Foreign keys

        /// <summary>
        /// Parent MasterUser pointed by [Master_Company].([UserId]) (FK_Master_Company_Users)
        /// </summary>
        public virtual MasterUser MasterUser { get; set; } // FK_Master_Company_Users
    }

    // Master_SaltyPassword
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterSaltyPassword
    {
        public long Pswdid { get; set; } // PSWDID (Primary key)
        public string Usrid { get; set; } // USRID (length: 150)
        public string Usrguid { get; set; } // USRGUID (length: 100)
        public string Pswdhash { get; set; } // PSWDHASH
        public string Pswdsalt { get; set; } // PSWDSALT
        public string Pswdguid { get; set; } // PSWDGUID (length: 100)
        public bool? Pswdcompromised { get; set; } // PSWDCOMPROMISED
        public System.DateTime? Pswdchangedon { get; set; } // PSWDCHANGEDON
        public bool Pswdisactive { get; set; } // PSWDISACTIVE
        public int? Pswdwrongattempt { get; set; } // PSWDWRONGATTEMPT
        public System.DateTime? Pswdexpireson { get; set; } // PSWDEXPIRESON
        public System.DateTime Createdondate { get; set; } // CREATEDONDATE
        public string Passwordtype { get; set; } // PASSWORDTYPE (length: 2)
        public string Usedalgorithm { get; set; } // USEDALGORITHM (length: 10)
        public string Pswdsaltkey { get; set; } // PSWDSALTKEY (length: 30)

        // Foreign keys

        /// <summary>
        /// Parent MasterUser pointed by [Master_SaltyPassword].([Usrid]) (FK_Master_SaltyPassword_Users)
        /// </summary>
        public virtual MasterUser MasterUser { get; set; } // FK_Master_SaltyPassword_Users
    }

    // Master_Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterUser
    {
        public string UserId { get; set; } // UserID (Primary key) (length: 150)
        public string UserName { get; set; } // UserName (length: 50)
        public string FirstName { get; set; } // FirstName (length: 100)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 100)
        public string Email { get; set; } // Email (length: 150)
        public System.DateTime CreatedDate { get; set; } // Created Date
        public System.DateTime? UpdatedDate { get; set; } // Updated Date
        public System.DateTime? LastLoginDate { get; set; } // LastLoginDate
        public string Guid { get; set; } // GUID (length: 100)
        public string Emailguid { get; set; } // EMAILGUID (length: 100)
        public string ProfilePicture { get; set; } // ProfilePicture
        public int? IsUserSeller { get; set; } // IsUserSeller
        public string PhNumber { get; set; } // PHNumber (length: 14)
        public bool? ShowPhNumber { get; set; } // ShowPHNumber
        public string Country { get; set; } // Country (length: 50)
        public bool IsActiveAccount { get; set; } // IsActiveAccount
        public string NonActiveReason { get; set; } // NonActiveReason (length: 25)
        public int? FkRoleId { get; set; } // FK_RoleId
        public string Ui { get; set; } // UI (length: 5)

        // Reverse navigation

        /// <summary>
        /// Child MasterCompanies where [Master_Company].[UserID] point to this entity (FK_Master_Company_Users)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MasterCompany> MasterCompanies { get; set; } // Master_Company.FK_Master_Company_Users
        /// <summary>
        /// Child MasterSaltyPasswords where [Master_SaltyPassword].[USRID] point to this entity (FK_Master_SaltyPassword_Users)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MasterSaltyPassword> MasterSaltyPasswords { get; set; } // Master_SaltyPassword.FK_Master_SaltyPassword_Users

        public MasterUser()
        {
            CreatedDate = System.DateTime.Now;
            MasterCompanies = new System.Collections.Generic.List<MasterCompany>();
            MasterSaltyPasswords = new System.Collections.Generic.List<MasterSaltyPassword>();
        }
    }

    // Master_Verbiage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterVerbiage
    {
        public long VerId { get; set; } // VER_ID (Primary key)
        public string VerCode { get; set; } // VER_Code (length: 20)
        public string VerTitle { get; set; } // VER_Title (length: 150)
        public string VerDetail { get; set; } // VER_Detail (length: 500)
        public string VerStatus { get; set; } // VER_Status (length: 10)
        public string VerAbbr { get; set; } // VER_Abbr (length: 150)
        public string VerUi { get; set; } // VER_UI (length: 25)
        public bool? VerIsActive { get; set; } // VER_IsActive
    }

    // PostMyData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class PostMyData
    {
        public long PostId { get; set; } // PostID (Primary key)
        public string Title { get; set; } // Title (length: 200)
        public string Image { get; set; } // Image
        public string Detail { get; set; } // Detail (length: 500)
        public string Username { get; set; } // Username (length: 150)
        public string Name { get; set; } // Name (length: 150)
        public string Email { get; set; } // Email (length: 150)
        public string Contact { get; set; } // Contact (length: 10)
        public string Address { get; set; } // Address (length: 250)
        public string Other { get; set; } // Other
        public string TopCategory { get; set; } // TopCategory (length: 50)
        public string SubCategory { get; set; } // SubCategory (length: 50)
        public bool? Active { get; set; } // Active
        public decimal? Price { get; set; } // Price
        public string Condition { get; set; } // Condition (length: 25)
        public string Brand { get; set; } // Brand (length: 20)
        public string Modal { get; set; } // Modal (length: 25)
        public string MileKmph { get; set; } // Mile_KMPH (length: 25)
        public string Warranty { get; set; } // Warranty (length: 10)
        public string ExtraWarranty { get; set; } // extra_Warranty (length: 25)
        public System.DateTime? DateAdded { get; set; } // DateAdded
        public string ShowPhoneNumber { get; set; } // ShowPhoneNumber (length: 5)
        public string ShowEmailId { get; set; } // showEmailID (length: 5)
    }

    #endregion

    #region POCO Configuration

    // ContactUs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class ContactUConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContactU>
    {
        public ContactUConfiguration()
            : this("dbo")
        {
        }

        public ContactUConfiguration(string schema)
        {
            ToTable("ContactUs", schema);
            HasKey(x => new { x.Id, x.Username, x.Email, x.Comment, x.Ui });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar").IsRequired().HasMaxLength(550).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Website).HasColumnName(@"website").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("date").IsOptional();
            Property(x => x.Ui).HasColumnName(@"UI").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(5).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Craig_Inquiry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class CraigInquiryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CraigInquiry>
    {
        public CraigInquiryConfiguration()
            : this("dbo")
        {
        }

        public CraigInquiryConfiguration(string schema)
        {
            ToTable("Craig_Inquiry", schema);
            HasKey(x => new { x.Id, x.Name, x.Email, x.Detail, x.DateAdded });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName(@"URL").HasColumnType("nvarchar").IsOptional().HasMaxLength(400);
            Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Ui).HasColumnName(@"UI").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
        }
    }

    // DBEncryptKey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class DbEncryptKeyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DbEncryptKey>
    {
        public DbEncryptKeyConfiguration()
            : this("dbo")
        {
        }

        public DbEncryptKeyConfiguration(string schema)
        {
            ToTable("DBEncryptKey", schema);
            HasKey(x => x.KeyId);

            Property(x => x.KeyId).HasColumnName(@"KeyId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DbEncryptKey_).HasColumnName(@"DBEncryptKey").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.IsKeyActive).HasColumnName(@"IsKeyActive").HasColumnType("bit").IsRequired();
            Property(x => x.KeyCreateDate).HasColumnName(@"KeyCreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.KeyExpireDate).HasColumnName(@"KeyExpireDate").HasColumnType("datetime").IsRequired();
            Property(x => x.RemarksOnKey).HasColumnName(@"RemarksOnKey").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.KeyCreatedBy).HasColumnName(@"KeyCreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(25);
        }
    }

    // Item_Description
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class ItemDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ItemDescription>
    {
        public ItemDescriptionConfiguration()
            : this("dbo")
        {
        }

        public ItemDescriptionConfiguration(string schema)
        {
            ToTable("Item_Description", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Condition).HasColumnName(@"Condition").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.PhoneBrand).HasColumnName(@"PhoneBrand").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.AutosBrand).HasColumnName(@"AutosBrand").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Modal).HasColumnName(@"Modal").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.MileKmph).HasColumnName(@"Mile_KMPH").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.Warranty).HasColumnName(@"Warranty").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ExtraWarranty).HasColumnName(@"extra_Warranty").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
        }
    }

    // Master_Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterCompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MasterCompany>
    {
        public MasterCompanyConfiguration()
            : this("dbo")
        {
        }

        public MasterCompanyConfiguration(string schema)
        {
            ToTable("Master_Company", schema);
            HasKey(x => new { x.CompanyId, x.UserId, x.CompanyName, x.Address, x.PhnCountryCode, x.PhNumber, x.ShowPhNumber });

            Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar").IsRequired().HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsRequired().HasMaxLength(200).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsRequired().HasMaxLength(200).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhnCountryCode).HasColumnName(@"PHNCountryCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhNumber).HasColumnName(@"PHNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(14).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailId).HasColumnName(@"EmailID").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.IsGovRegistered).HasColumnName(@"IsGOVRegistered").HasColumnType("bit").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            Property(x => x.EmailVerified).HasColumnName(@"EmailVerified").HasColumnType("bit").IsOptional();
            Property(x => x.PhoneVerified).HasColumnName(@"PhoneVerified").HasColumnType("bit").IsOptional();
            Property(x => x.ShowPhNumber).HasColumnName(@"ShowPHNumber").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"Created Date").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"Updated Date").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.MasterUser).WithMany(b => b.MasterCompanies).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Master_Company_Users
        }
    }

    // Master_SaltyPassword
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterSaltyPasswordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MasterSaltyPassword>
    {
        public MasterSaltyPasswordConfiguration()
            : this("dbo")
        {
        }

        public MasterSaltyPasswordConfiguration(string schema)
        {
            ToTable("Master_SaltyPassword", schema);
            HasKey(x => x.Pswdid);

            Property(x => x.Pswdid).HasColumnName(@"PSWDID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Usrid).HasColumnName(@"USRID").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Usrguid).HasColumnName(@"USRGUID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Pswdhash).HasColumnName(@"PSWDHASH").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Pswdsalt).HasColumnName(@"PSWDSALT").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Pswdguid).HasColumnName(@"PSWDGUID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Pswdcompromised).HasColumnName(@"PSWDCOMPROMISED").HasColumnType("bit").IsOptional();
            Property(x => x.Pswdchangedon).HasColumnName(@"PSWDCHANGEDON").HasColumnType("smalldatetime").IsOptional();
            Property(x => x.Pswdisactive).HasColumnName(@"PSWDISACTIVE").HasColumnType("bit").IsRequired();
            Property(x => x.Pswdwrongattempt).HasColumnName(@"PSWDWRONGATTEMPT").HasColumnType("int").IsOptional();
            Property(x => x.Pswdexpireson).HasColumnName(@"PSWDEXPIRESON").HasColumnType("datetime").IsOptional();
            Property(x => x.Createdondate).HasColumnName(@"CREATEDONDATE").HasColumnType("datetime").IsRequired();
            Property(x => x.Passwordtype).HasColumnName(@"PASSWORDTYPE").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Usedalgorithm).HasColumnName(@"USEDALGORITHM").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Pswdsaltkey).HasColumnName(@"PSWDSALTKEY").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(30);

            // Foreign keys
            HasRequired(a => a.MasterUser).WithMany(b => b.MasterSaltyPasswords).HasForeignKey(c => c.Usrid).WillCascadeOnDelete(false); // FK_Master_SaltyPassword_Users
        }
    }

    // Master_Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MasterUser>
    {
        public MasterUserConfiguration()
            : this("dbo")
        {
        }

        public MasterUserConfiguration(string schema)
        {
            ToTable("Master_Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar").IsRequired().HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.CreatedDate).HasColumnName(@"Created Date").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedDate).HasColumnName(@"Updated Date").HasColumnType("datetime").IsOptional();
            Property(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Guid).HasColumnName(@"GUID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Emailguid).HasColumnName(@"EMAILGUID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ProfilePicture).HasColumnName(@"ProfilePicture").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsUserSeller).HasColumnName(@"IsUserSeller").HasColumnType("int").IsOptional();
            Property(x => x.PhNumber).HasColumnName(@"PHNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(14);
            Property(x => x.ShowPhNumber).HasColumnName(@"ShowPHNumber").HasColumnType("bit").IsOptional();
            Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsActiveAccount).HasColumnName(@"IsActiveAccount").HasColumnType("bit").IsRequired();
            Property(x => x.NonActiveReason).HasColumnName(@"NonActiveReason").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.FkRoleId).HasColumnName(@"FK_RoleId").HasColumnType("int").IsOptional();
            Property(x => x.Ui).HasColumnName(@"UI").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
        }
    }

    // Master_Verbiage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MasterVerbiageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MasterVerbiage>
    {
        public MasterVerbiageConfiguration()
            : this("dbo")
        {
        }

        public MasterVerbiageConfiguration(string schema)
        {
            ToTable("Master_Verbiage", schema);
            HasKey(x => x.VerId);

            Property(x => x.VerId).HasColumnName(@"VER_ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VerCode).HasColumnName(@"VER_Code").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.VerTitle).HasColumnName(@"VER_Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.VerDetail).HasColumnName(@"VER_Detail").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.VerStatus).HasColumnName(@"VER_Status").HasColumnType("nvarchar").IsRequired().HasMaxLength(10);
            Property(x => x.VerAbbr).HasColumnName(@"VER_Abbr").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.VerUi).HasColumnName(@"VER_UI").HasColumnType("nvarchar").IsRequired().HasMaxLength(25);
            Property(x => x.VerIsActive).HasColumnName(@"VER_IsActive").HasColumnType("bit").IsOptional();
        }
    }

    // PostMyData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class PostMyDataConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostMyData>
    {
        public PostMyDataConfiguration()
            : this("dbo")
        {
        }

        public PostMyDataConfiguration(string schema)
        {
            ToTable("PostMyData", schema);
            HasKey(x => x.PostId);

            Property(x => x.PostId).HasColumnName(@"PostID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.Image).HasColumnName(@"Image").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Contact).HasColumnName(@"Contact").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Other).HasColumnName(@"Other").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.TopCategory).HasColumnName(@"TopCategory").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SubCategory).HasColumnName(@"SubCategory").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.Condition).HasColumnName(@"Condition").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.Brand).HasColumnName(@"Brand").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Modal).HasColumnName(@"Modal").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.MileKmph).HasColumnName(@"Mile_KMPH").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.Warranty).HasColumnName(@"Warranty").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ExtraWarranty).HasColumnName(@"extra_Warranty").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsOptional();
            Property(x => x.ShowPhoneNumber).HasColumnName(@"ShowPhoneNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.ShowEmailId).HasColumnName(@"showEmailID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class ButtonSearchOnClickReturnModel
    {
        public System.Int64 PostID { get; set; }
        public System.String Title { get; set; }
        public System.String Image { get; set; }
        public System.String Detail { get; set; }
        public System.String Name { get; set; }
        public System.String Email { get; set; }
        public System.String Contact { get; set; }
        public System.String Address { get; set; }
        public System.String Other { get; set; }
        public System.String TopCategory { get; set; }
        public System.String SubCategory { get; set; }
        public System.Decimal? Price { get; set; }
        public System.String Condition { get; set; }
        public System.String Brand { get; set; }
        public System.String Modal { get; set; }
        public System.String Mile_KMPH { get; set; }
        public System.String Warranty { get; set; }
        public System.String extra_Warranty { get; set; }
        public System.DateTime? DateAdded { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class GetDataReturnModel
    {
        public System.String Title { get; set; }
        public System.String Image { get; set; }
        public System.String Detail { get; set; }
        public System.String Name { get; set; }
        public System.String Email { get; set; }
        public System.String Contact { get; set; }
        public System.String Address { get; set; }
        public System.String Other { get; set; }
        public System.String TopCategory { get; set; }
        public System.String SubCategory { get; set; }
        public System.Decimal? Price { get; set; }
        public System.String Condition { get; set; }
        public System.String Brand { get; set; }
        public System.String Modal { get; set; }
        public System.String Mile_KMPH { get; set; }
        public System.String Warranty { get; set; }
        public System.String extra_Warranty { get; set; }
        public System.DateTime? DateAdded { get; set; }
        public System.String ShowPhoneNumber { get; set; }
        public System.String showEmailID { get; set; }
        public System.String ProfilePicture { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class SpDbEncryptKeyReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
        public class ResultSetModel1
        {
            public System.String RESULT { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
        public class ResultSetModel2
        {
            public System.Int32? RESULT { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
        public class ResultSetModel3
        {
            public System.Int32? RESULT { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class SpRegisterUserReturnModel
    {
        public System.String Ver_Status { get; set; }
        public System.String VER_Detail { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class SpUpdateCompanyReturnModel
    {
        public System.String Ver_Status { get; set; }
        public System.String VER_Detail { get; set; }
    }

    #endregion

}
// </auto-generated>

